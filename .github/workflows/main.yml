name: platform deployment
on: [push]

env:
  GKE_CLUSTER: ${{ secrets.GKE_PROJECT }}-gke
  GKE_ZONE: us-central1
  GKE_PROJECT: ${{ secrets.GKE_PROJECT }}

jobs:
  create-cluster:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: check out the repo
        uses: actions/checkout@v2

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: terraform init
        run: terraform init

      - name: terraform apply
        run: terraform apply -auto-approve=true

  deploy-ingress:
    needs: [create-cluster]
    name: deploy ingress to cluster
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: deploy ingress
      run: |-
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.45.0/deploy/static/provider/cloud/deploy.yaml

  deploy-argocd:
    needs: [create-cluster]
    name: deploy argo cd to cluster
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: create namespace for argocd and deploy argocd
      continue-on-error: true
      run: |-
        kubectl create namespace argocd
        kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

    - name: expose argo cd
      run: |-
        export INGRESS_IP=$(kubectl get services --namespace ingress-nginx ingress-nginx-controller --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
        envsubst < kubernetes/argocd-ingress.yaml| kubectl apply -f -

  deploy-app:
    needs: [deploy-argocd]
    name: deploy hipster shop app
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    - name: creat namespace for app
      continue-on-error: true
      run: |-
        kubectl create ns microservices-demo

    - name: install argo cd cli
      run: |-
        VERSION=$(curl --silent "https://api.github.com/repos/argoproj/argo-cd/releases/latest" | grep '"tag_name"' | sed -E 's/.*"([^"]+)".*/\1/')
        sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-linux-amd64
        sudo chmod +x /usr/local/bin/argocd

    - name: login to argo cd
      run: |-
        INGRESS_HOST=$(kubectl get ingress -n argocd -o jsonpath='{.items[0].spec.rules[0].host}')
        ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
        argocd login $INGRESS_HOST --username admin --password $ARGOCD_PASSWORD --insecure

    - name: add cluster to argo cd
      run: |-
        CURRENT_CONTEXT=$(kubectl config get-contexts -o name)
        argocd cluster add $CURRENT_CONTEXT

    - name: creat app in argo cd
      run: |-
        DEST_SERVER=$(kubectl config view --minify | grep server | cut -f 2- -d ":" | tr -d " ")
        argocd app create hipster-shop --repo https://github.com/sspyataev/microservices-demo.git --path release --dest-server $DEST_SERVER --dest-namespace microservices-demo

    - name: sync app
      run: |-
        argocd app sync hipster-shop

  setup-monitoring:
    needs: [deploy-app]
    name: deploy amd setup prometheus for monitoring k8s-cluster and application
    runs-on: ubuntu-latest
    steps:
    - name: checkout
      uses: actions/checkout@v2
    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}
    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker
    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}
    - name: creat namespace for monitoring and deploy prometheus
      continue-on-error: true
      run: |-
        kubectl create ns monitoring
        kubectl create -n monitoring -f manifests/setup/
        until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
        kubectl create -n monitoring -f manifests/
